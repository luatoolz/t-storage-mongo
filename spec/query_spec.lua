describe("query", function()
  local t, mongo, unquery, query, pak, unpak
  setup(function()
    t = require "t"
    mongo = t.storage.mongo
    query = mongo.query
    unquery = mongo.unquery
    pak = function(...) local lpak=table.pack or pack; local rv=lpak(...); rv.n=nil; return rv end
    unpak = table.unpack or unpack
    _ = unpak
  end)
  it("query", function()
    assert.same({query='a', options={limit=1}, as=true}, query('a', {limit=1}, true))
    assert.same({query='a', as=true}, query('a', nil, true))
    assert.same('a', query('a'))

    assert.same({query={}, options={limit=1}, as=true}, query({}, {limit=1}, true))
    assert.same({query={}, options={limit=1}}, query({}, {limit=1}))
    assert.same({query={}, as=true}, query({}, nil, true))
    assert.same({}, query({}))

    assert.same({query='a', options={limit=1}}, query('a', {limit=1}, false))
    assert.same({query='a', as=true}, query('a', false, true))
    assert.same('a', query('a', false, false))
  end)
  it("double query", function()
    assert.same({query='a', options={limit=1}, as=true}, query(query('a', {limit=1}, true)))
    assert.same({query='a', options={limit=1}}, query(query('a', {limit=1})))
    assert.same({query='a', as=true}, query(query('a', nil, true)))
    assert.same('a', query(query('a')))

    assert.same({query={}, options={limit=1}, as=true}, query(query({}, {limit=1}, true)))
    assert.same({query={}, options={limit=1}}, query(query({}, {limit=1})))
    assert.same({query={}, as=true}, query(query({}, nil, true)))
    assert.same({}, query(query({})))
  end)
  it("unquery", function()
    assert.same({'a', {limit=1}, true}, pak(unquery({query='a', options={limit=1}, as=true})))
    assert.same({'a', {limit=1}}, pak(unquery({query='a', options={limit=1}})))
    assert.same({'a', nil, true}, pak(unquery({query='a', as=true})))
    assert.same({'a'}, pak(unquery({query='a'})))
    assert.same({'a'}, pak(unquery('a')))
    assert.same('a', unquery('a'))

    assert.same({'a', {limit=2}, 'function'}, pak(unquery({query='a', options={limit=1}, as=true}, {limit=2}, 'function')))
    assert.same({'a', {limit=2}, true}, pak(unquery({query='a', options={limit=1}}, {limit=2}, true)))
    assert.same({'a', {limit=1}, true}, pak(unquery({query='a', options={limit=1}}, nil, true)))
    assert.same({'a', {limit=2}, true}, pak(unquery({query='a', as=false}, {limit=2}, true)))
    assert.same({'a', nil, true}, pak(unquery({query='a', as=false}, nil, true)))
    assert.same({'a', nil, true}, pak(unquery({query='a', as=true})))
    assert.same({'a'}, pak(unquery({query='a'})))
    assert.same({'a'}, pak(unquery('a')))
    assert.same('a', unquery('a'))

    assert.same({'a', {limit=2}}, pak(unquery({query='a', options={limit=1}, as=true}, {limit=2}, false)))
    assert.same({'a', nil, true}, pak(unquery({query='a', options={limit=1}, as=true}, false, nil)))
    assert.same({'a'}, pak(unquery({query='a', options={limit=1}, as=true}, false, false)))
  end)
  it("query unquery query", function()
    assert.same({query='a', options={limit=1}, as=true}, query(unquery(query('a', {limit=1}, true))))
    assert.same({query='a', options={limit=1}}, query(unquery(query('a', {limit=1}))))
    assert.same({query='a', as=true}, query(unquery(query('a', nil, true))))
    assert.same('a', query(unquery(query('a'))))

    assert.same({query={}, options={limit=1}, as=true}, query(unquery(query({}, {limit=1}, true))))
    assert.same({query={}, options={limit=1}}, query(unquery(query({}, {limit=1}))))
    assert.same({query={}, as=true}, query(unquery(query({}, nil, true))))
    assert.same({}, query(unquery(query({}))))
  end)
  it("unquery query unquery", function()
    assert.same({'a', {limit=1}, true}, pak(unquery(query(unquery('a', {limit=1}, true)))))
    assert.same({'a', {limit=1}}, pak(unquery(query(unquery('a', {limit=1}, false)))))
    assert.same({'a', {limit=1}}, pak(unquery(query(unquery('a', {limit=1})))))
    assert.same({'a', nil, true}, pak(unquery(query(unquery('a', nil, true)))))
    assert.same({'a', nil, true}, pak(unquery(query(unquery('a', false, true)))))
    assert.same({'a'}, pak(unquery(query(unquery('a')))))
    assert.same('a', unquery(query(unquery('a'))))

    assert.same({{}, {limit=1}, true}, pak(unquery(query(unquery({}, {limit=1}, true)))))
    assert.same({{}, {limit=1}}, pak(unquery(query(unquery({}, {limit=1})))))
    assert.same({{}, nil, true}, pak(unquery(query(unquery({}, nil, true)))))
    assert.same({{}}, pak(unquery(query(unquery({})))))
  end)
  it("nil", function()
    assert.is_nil(unquery())
    assert.is_nil(unquery(nil))
    assert.is_nil(unquery(nil, nil))
    assert.is_nil(unquery(nil, nil, nil))
    assert.is_nil(unquery(nil, nil, nil, nil))

    assert.is_nil(query())
    assert.is_nil(query(nil))
    assert.is_nil(query(nil, nil))
    assert.is_nil(query(nil, nil, nil))
    assert.is_nil(query(nil, nil, nil, nil))
  end)
end)